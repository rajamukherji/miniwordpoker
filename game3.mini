import: glib("gir/GLib")
import: gobject("gir/GObject")
import: json("fmt/json")
import: uuid("util/uuid")
logger: log("main")

:<
import: game("game")
let Game := game::game("Test")
let P1 := game::player("Ann")
let P2 := game::player("Bob")
let P3 := game::player("Cat")
let P4 := game::player("Dan")
P1 join Game
P2 join Game
Game:start
>:

random::seed(time():nsec)

fun score_word(Word) do
	def Values := {
		"a" is 1, "b" is 3, "c" is 3, "d" is 2, "e" is 1, "f" is 4, "g" is 2, "h" is 4,
		"i" is 1, "j" is 8, "k" is 5, "l" is 1, "m" is 3, "n" is 1, "o" is 1, "p" is 3,
		"q" is 10, "r" is 1, "s" is 1, "t" is 1, "u" is 1, "v" is 4, "w" is 4, "x" is 8,
		"y" is 4, "z" is 10
	}
	ret reduce(0, Word; S, L) (S * 2) + Values[L]
end

let Dictionary := {}

with File := file('{import}/dictionary.txt', "r") do
	loop
		let Word := (while File:read):trim:lower
		do
			Dictionary[Word] := score_word(Word)
		on Error do
			log::warn('Skipping word', Word)
		end
	end
	File:close
end

Dictionary:sort2(; W1, W2, S1, S2) S1 < S2

let SortedDictionary := {}
for Word, Score in Dictionary do
	let Sorted := sum(list(Word):sort)
	SortedDictionary[Sorted] := (Word, Score)
end

log::info("Loaded ", count(Dictionary), " words")

export: class: game(
	:name, :owner, :password, :state,
	:initpoints, :round, :players, :countdown,
	:limit, :history,
	
	state is enum("Initial", "Starting", "Swapping", "Playing", "Scoring", "Ending"),
	init is fun(Game, Name, Owner, Password) do
		Game:name := Name
		Game:owner := Owner
		Game:password := Password
		Game:state := game::state::Initial
		Game:initpoints := 1000
		Game:round := 0
		Game:players := []
		Game:history := []
	end
)

export: class: player(:name, :callback, :game, :points, :swap, :board, :word, :score, :best, :damage, :shield,
	init is fun(Player, Name, Callback) do
		Player:name := Name
		Player:callback := Callback or fun(Player, Event, Data) do
			print(Event, " ", Data, "\n")
		end
	end
)

meth :emit(Player: player, [Args]) do
	Player:callback ! [Player]:grow(Args)
end

meth :state(Player: player) do
	if let Game := Player:game then
		ret {
			"name" is Game:name, "state" is string(Game:state),
			"countdown" is Game:countdown, "limit" is Game:limit,
			"points" is Player:points, "swap" is Player:swap,
			"word" is Player:word, "score" is Player:score,
			"owner" is Game:owner = Player and true,
			"players" is list(Game:players; Other) {
				"name" is Other:name, "points" is Other:points,
				"self" is Other = Player and true
			}
		}
	end
end

meth :join(Player: player, Game: game) do
	Player:game and error("StateError", "Player already in game")
	Player:game := Game
	Player:points := Game:initpoints
	Player:word := nil
	for Other in Game:players do
		Other:emit("game/join", {"name" is Player:name, "points" is Player:points})
	end
	Game:players:put(Player)
	ret Player:state
end

let Games := []

meth :start(Player: player, Game: game) do
	Game:state = game::state::Initial or error("StateError", "Invalid state")
	Game:owner = Player or error("StateError", "Invalid owner")
	Game:state := game::state::Starting
	Game:countdown := Game:limit := 3
	for Player in Game:players do
		Player:points := Game:initpoints
		Player:emit("round/starting", {
			"countdown" is Game:countdown, "limit" is Game:limit
		})
	end
	Games:put(Game)
end

meth :leave(Player: player, Game: game) do
	Game = Player:game or error("StateError", "Player not in game")
	Player:game := nil
	let Players := Game:players
	let Index := Players:find(Player)
	Players:delete(Index)
	Player:emit("game/leave", {})
	for Player in Game:players do
		Player:emit("game/leave", {"player" is Index})
	end
	if Players:length = 0 then
		Games:filter(_ != Game)
	end
end

fun check_word(Word, Board) do
	let Score := Dictionary[Word] or ret -1
	for Letter, Count in count2(Word) do
		Count <= Board[Letter] or ret -1
	end
	ret Score
end

meth :swap(Player: player, Letters: string) do
	Player:swap := Letters
	ret {}
end

meth :word(Player: player, Word: string) do
	Player:game:state != game::state::Playing and error("StateError", "Invalid state")
	let Score := check_word(Word, count2(Player:board))
	if Score > Player:score then
		Player:score := Score
		Player:word := Word
	end
	ret {"word" is Word, "score" is Score, "bestWord" is Player:word, "bestScore" is Player:score}
end

let Bag := sum({
	"a" is 16, "b" is 4, "c" is 6, "d" is 8, "e" is 24, "f" is 4, "g" is 5, "h" is 5,
	"i" is 13, "j" is 2, "k" is 2, "l" is 7, "m" is 6, "n" is 13, "o" is 15, "p" is 4,
	"q" is 2, "r" is 13, "s" is 10, "t" is 15, "u" is 7, "v" is 3, "w" is 4, "x" is 2,
	"y" is 4, "z" is 2
} =>> fun(L, N) @L limit N)

log::info("Using ", Bag:count, " letters")

fun best_word(Board) do
	Board:sort
	let Words := []
	for Letter, Count in Board do
		let N := Words:length
		for I in 1 .. Count do
			let Letters := I * Letter
			Words:put(Letters)
			for Word in Words limit N do
				Words:put(Word + Letters)
			end
		end
	end
	var Best := ("", 0)
	for Word in Words do
		let Sorted := SortedDictionary[Word] or next
		if Sorted[2] > Best[2] then
			Best := Sorted
		end
	end
	ret {"word" is Best[1], "score" is Best[2]}
end

glib::timeout_add(0, 1000;) do
	for Game in Games do
		ref Countdown := Game:countdown
		if Countdown and Countdown:dec = 0 then
			ref State := Game:state
			let Players := Game:players
			switch State: game::state
			case "Starting" do
				Game:round:inc
				let Board := list(1 .. 6;) Bag:random
				State := game::state::Swapping
				Countdown := Game:limit := 20
				for Player in Players do
					Player:swap := ""
					Player:board := Board + list(1 .. 3;) Bag:random
					Player:word := ""
					Player:score := 0
					Player:emit("round/swapping", {
						"countdown" is Countdown, "limit" is Game:limit,
						"board" is Player:board,
						"points" is Player:points,
						"word" is Player:word, "score" is Player:score
					})
				end
			case "Swapping" do
				State := game::state::Playing
				Countdown := Game:limit := 60
				for Player in Players do
					let Board := Player:board
					for Swap in Player:swap do
						Board:delete(Board:find(Swap){})
					end
					Board:grow(Board:length ..< 9;) Bag:random
					Player:emit("round/playing", {
						"countdown" is Countdown, "limit" is Game:limit,
						"board" is Player:board,
						"points" is Player:points,
						"word" is Player:word, "score" is Player:score
					})
				end
			case "Playing" do
				State := game::state::Scoring
				Countdown := Game:limit := Players:count + 2
				for Player in Players do
					Player:best := best_word(count2(Player:board{}){})
				end
				let MaxScore := max(Players, :score)
				let Results := list(Players; Player) do
					let Damage := Player:damage := MaxScore - Player:score
					let Shield := Player:shield := if Player:score = Player:best["score"] then
						true
					else
						false
					end
					Shield = true or Player:points := (old - Damage) max 0
					{
						"name" is Player:name,
						"word" is Player:word, "score" is Player:score,
						"best" is Player:best, "points" is Player:points,
						"damage" is Damage, "shield" is Shield
					}
				end
				Game:history:put(Results)
				for Player in Players do
					Player:emit("round/scoring", {
						"countdown" is Countdown, "limit" is Game:limit,
						"round" is Game:round, "players" is Results
					})
				end
			case "Scoring" do
				State := game::state::Ending
				Countdown := Game:limit := 1
				for Player in Players do
					Player:emit("round/ending", {
						"countdown" is Countdown, "limit" is Game:limit,
						"players" is list(Players; Player) {"points" is Player:points}
					})
				end
			case "Ending" do
				State := game::state::Starting
				Countdown := Game:limit := 3
				for Player in Players do
					Player:emit("round/starting", {
						"countdown" is Countdown,  "limit" is Game:limit
					})
				end
			end
		end
	on Error do
		log::error(Error)
	end
	ret true
end
